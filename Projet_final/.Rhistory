usethis::use_git_config(user.name = "LouBer25", user.email = "berm8376@usherbrooke.ca")
## Créer un jeton d'accès :
usethis::create_github_token()
## Enregistrer le jeton d'accès :
credentials::set_github_pat()
## Enregistrer le jeton d'accès :
credentials::set_github_pat(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)
## Enregistrer le jeton d'accès :
credentials::set_github_pat()
install.packages("usethis")
usethis::use_git_config(user.name = "LouBer25", user.email = "berm8376@usherbrooke.ca")
## Créer un jeton d'accès :
usethis::create_github_token()
## Enregistrer le jeton d'accès :
credentials::set_github_pat()
usethis::use_git_config(user.name = "LouBer25", user.email = "berm8376@usherbrooke.ca")
## Créer un jeton d'accès :
usethis::create_github_token()
## Enregistrer le jeton d'accès :
credentials::set_github_pat()
library(usethis)
usethis::use_git_config(user.name = "LouBer25", user.email = "berm8376@usherbrooke.ca")
## Enregistrer le jeton d'accès :
credentials::set_github_pat()
setwd("C:/Users/marbe/Desktop/UdeS Hiver 2025/Méthodes en écologie computationnelle/BIO500_Lepidopteres_MAJM/Projet_final")
library(dplyr)              #Cela est plus optimisé que des boucle, sinon se sera trop long à générer
  library(ritis)              #Transformer les noms scientifiques en code ITIS.
  library(purrr)              #Optimiser le trajet en pouvant manipuler les listes.
  library(furrr)              #Pour exécuter en parallèle la fonction "purrr"
  library(future)             #Exécuter furrr
  library(readr)
  library(RSQLite)
  library(terra)
  #install.packages("ggplot2")
  library(ggplot2)
  #install.packages("viridis")
  library(viridis)
  #install.packages("ggspatial")
  library(ggspatial)
  #install.packages("maptiles")
  library(maptiles)
  #install.packages("rnaturalearth")
  library(rnaturalearth)
  #install.packages("rnaturalearthdata")
  library(rnaturalearthdata)
  #install.packages("sf")
  library(sf)
  #install.packages("devtools")
  library(devtools)
  devtools::install_github("ropensci/rnaturalearthhires")
source("./scripts/01_Assemblage_et_nettoyage_des_donnees.R")
source("./scripts/02_Creation_des_tables_SQL.R")
source("./scripts/03_Creation_graphique_richesse_specifique.R")
assemblage_donnees()
creation_SQL()
graphique_richesse_specifique()
graphique_richesse_specifique()
graph_richesse_specifique(richesse_specifique("../data"))
setwd("C:/Users/marbe/Desktop/UdeS Hiver 2025/Méthodes en écologie computationnelle/BIO500_Lepidopteres_MAJM/Projet_final")
source("../scripts/141_richesse_specifique.R")
source("./scripts/141_richesse_specifique.R")
dbSendQuery()
dbSendQuery(con)
requete_nombre_especes_par_annee <- "
    SELECT d.year_obs AS annee, COUNT(DISTINCT o.observed_scientific_name) AS nombre_especes
    FROM observation o
    JOIN date d ON o.dwc_event_date = d.dwc_event_date
    GROUP BY d.year_obs
    ORDER BY d.year_obs;
  "
  resultats_nombre_espece
  resultats_nombre_especes <- dbGetQuery(con, requete_nombre_especes_par_annee)
 requete_nombre_especes_par_annee <- "
    SELECT d.year_obs AS annee, COUNT(DISTINCT o.observed_scientific_name) AS nombre_especes
    FROM observation o
    JOIN date d ON o.dwc_event_date = d.dwc_event_date
    GROUP BY d.year_obs
    ORDER BY d.year_obs;
  "
  resultats_nombre_especes <- dbGetQuery(con, requete_nombre_especes_par_annee)
q()
